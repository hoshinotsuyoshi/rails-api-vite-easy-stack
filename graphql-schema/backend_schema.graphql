"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime @specifiedBy(url: "https://tools.ietf.org/html/rfc3339")

"""
Objects which may be commented on
"""
# TODO comment on the union
union LoginError = SomethingWrong

"""
Autogenerated input type of Login
"""
input LoginInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  emailAddress: String!
  password: String!
}

"""
Autogenerated return type of Login.
"""
type LoginPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [LoginError!]!
  success: Boolean!
}

"""
Autogenerated input type of Logout
"""
input LogoutInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of Logout.
"""
type LogoutPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  logout: Boolean!
}

type Mutation {
  """
  Login
  """
  login(
    """
    Parameters for Login
    """
    input: LoginInput!
  ): LoginPayload!

  """
  Logout
  """
  logout(
    """
    Parameters for Logout
    """
    input: LogoutInput!
  ): LogoutPayload!

  """
  SetPassword
  """
  setPassword(
    """
    Parameters for SetPassword
    """
    input: SetPasswordInput!
  ): SetPasswordPayload!

  """
  Signup
  """
  signup(
    """
    Parameters for Signup
    """
    input: SignupInput!
  ): SignupPayload!

  """
  Verify email address
  """
  verifyEmailAddress(
    """
    Parameters for VerifyEmailAddress
    """
    input: VerifyEmailAddressInput!
  ): VerifyEmailAddressPayload!
}

"""
An object with an ID.
"""
interface Node {
  """
  ID of the object.
  """
  id: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

type Product implements Node {
  createdAt: ISO8601DateTime!
  description: String!

  """
  ID of the object.
  """
  id: ID!
  name: String!
  stock: Int!
  unitPrice: Float!
  updatedAt: ISO8601DateTime!
}

"""
The connection type for Product.
"""
type ProductConnection {
  """
  A list of edges.
  """
  edges: [ProductEdge]

  """
  A list of nodes.
  """
  nodes: [Product]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type ProductEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Product
}

type Query {
  """
  Fetch current session
  """
  me: User

  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node

  """
  Fetches a list of objects given a list of IDs.
  """
  nodes(
    """
    IDs of the objects.
    """
    ids: [ID!]!
  ): [Node]

  """
  Fetch all Products
  """
  products(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProductConnection!
}

"""
Autogenerated input type of SetPassword
"""
input SetPasswordInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  password: String!
}

"""
Autogenerated return type of SetPassword.
"""
type SetPasswordPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  user: User
}

"""
Objects which may be commented on
"""
# TODO comment on the union
union SignupError = Taken

"""
Autogenerated input type of Signup
"""
input SignupInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  emailAddress: String!
}

"""
Autogenerated return type of Signup.
"""
type SignupPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [SignupError!]!
  success: Boolean!
}

type SomethingWrong {
  message: String!
}

type Taken {
  message: String!
}

type User implements Node {
  emailAddress: String!

  """
  ID of the object.
  """
  id: ID!
}

"""
Autogenerated input type of VerifyEmailAddress
"""
input VerifyEmailAddressInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  signedId: String!
}

"""
Autogenerated return type of VerifyEmailAddress.
"""
type VerifyEmailAddressPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  success: Boolean!
}
